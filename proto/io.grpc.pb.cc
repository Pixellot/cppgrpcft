// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: io.proto

#include "io.pb.h"
#include "io.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Io {

static const char* Transfer_method_names[] = {
  "/Io.Transfer/Receive",
  "/Io.Transfer/Send",
};

std::unique_ptr< Transfer::Stub> Transfer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Transfer::Stub> stub(new Transfer::Stub(channel));
  return stub;
}

Transfer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Receive_(Transfer_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Send_(Transfer_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientReader< ::Io::Chunk>* Transfer::Stub::ReceiveRaw(::grpc::ClientContext* context, const ::Io::Info& request) {
  return ::grpc::internal::ClientReaderFactory< ::Io::Chunk>::Create(channel_.get(), rpcmethod_Receive_, context, request);
}

void Transfer::Stub::experimental_async::Receive(::grpc::ClientContext* context, ::Io::Info* request, ::grpc::experimental::ClientReadReactor< ::Io::Chunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Io::Chunk>::Create(stub_->channel_.get(), stub_->rpcmethod_Receive_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Io::Chunk>* Transfer::Stub::AsyncReceiveRaw(::grpc::ClientContext* context, const ::Io::Info& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Io::Chunk>::Create(channel_.get(), cq, rpcmethod_Receive_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Io::Chunk>* Transfer::Stub::PrepareAsyncReceiveRaw(::grpc::ClientContext* context, const ::Io::Info& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Io::Chunk>::Create(channel_.get(), cq, rpcmethod_Receive_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::Io::Packet>* Transfer::Stub::SendRaw(::grpc::ClientContext* context, ::Io::Status* response) {
  return ::grpc::internal::ClientWriterFactory< ::Io::Packet>::Create(channel_.get(), rpcmethod_Send_, context, response);
}

void Transfer::Stub::experimental_async::Send(::grpc::ClientContext* context, ::Io::Status* response, ::grpc::experimental::ClientWriteReactor< ::Io::Packet>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::Io::Packet>::Create(stub_->channel_.get(), stub_->rpcmethod_Send_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::Io::Packet>* Transfer::Stub::AsyncSendRaw(::grpc::ClientContext* context, ::Io::Status* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::Io::Packet>::Create(channel_.get(), cq, rpcmethod_Send_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::Io::Packet>* Transfer::Stub::PrepareAsyncSendRaw(::grpc::ClientContext* context, ::Io::Status* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::Io::Packet>::Create(channel_.get(), cq, rpcmethod_Send_, context, response, false, nullptr);
}

Transfer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Transfer_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Transfer::Service, ::Io::Info, ::Io::Chunk>(
          [](Transfer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Io::Info* req,
             ::grpc::ServerWriter<::Io::Chunk>* writer) {
               return service->Receive(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Transfer_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Transfer::Service, ::Io::Packet, ::Io::Status>(
          [](Transfer::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::Io::Packet>* reader,
             ::Io::Status* resp) {
               return service->Send(ctx, reader, resp);
             }, this)));
}

Transfer::Service::~Service() {
}

::grpc::Status Transfer::Service::Receive(::grpc::ServerContext* context, const ::Io::Info* request, ::grpc::ServerWriter< ::Io::Chunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Transfer::Service::Send(::grpc::ServerContext* context, ::grpc::ServerReader< ::Io::Packet>* reader, ::Io::Status* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Io

